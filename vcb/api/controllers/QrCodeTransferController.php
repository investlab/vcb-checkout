<?php

namespace api\controllers;



use common\models\business\TransactionBusiness;
use common\models\db\Bank;
use common\models\db\CheckoutOrder;
use common\models\db\Merchant;
use common\models\db\PartnerPayment;
use common\models\db\PartnerPaymentAccount;
use common\models\db\PaymentMethod;
use common\models\db\Transaction;
use common\models\db\UserLogin;
use common\payments\NganLuongSeamless;
use yii\filters\auth\HttpBasicAuth;
use yii\rest\ActiveController;

class QrCodeTransferController extends ActiveController
{
    public $modelClass = '';

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        \Yii::$app->user->enableSession = false;
    }

    public function behaviors()
    {
        $behaviors = parent::behaviors();
        $behaviors['authenticator'] = [
            'class' => HttpBasicAuth::className(),
            'auth' => function ($username, $password) {
                $check_user = UserLogin::find()->where(['email' => $username])->andWhere(['status' => 1])->count();
                if ($check_user > 0) {
                    $user = UserLogin::find()->where(['email' => $username])->andWhere(['status' => 1])->one();
                    if ($user->password == md5(md5($password))) {
                        return $user;
                    }
                    return null;
                } else {
                    return null;
                }
            },

        ];

        //$behaviors['contentNegotiator']['formats']['text/html'] = Response::FORMAT_RAW; // || Response::FORMAT_XML

        return $behaviors;
    }

    public function actionTransfer()
    {
        $data=null;
        $token = \Yii::$app->request->get('token');
        $method = \Yii::$app->request->get('method');
        $bank_code = \Yii::$app->request->get('bank_code');
        $qr_encoded_data = null;
        $response['code'] = '0001';
        $response['message'] = 'No data collected.';
        $checkout_order = CheckoutOrder::find()->where(['token_code' => $token])->one();
        $transaction=Transaction::find()->where(['checkout_order_id'=>$checkout_order['id']])->one();
        $min_amount=PaymentMethod::find()->where(['code'=>$bank_code.'-QR-CODE'])->one();
        if ($min_amount==null){
            $response['code'] = '0010';
            $response['message'] = 'Minimum transaction amount not set.';
        }else{
            $min_amount=$min_amount['min_amount'];
        }
        if ($checkout_order != null) {
            if ($checkout_order['amount'] >= $min_amount) {
                $merchant = Merchant::findOne($checkout_order['merchant_id']);
                $partner_payment = PartnerPayment::find()->where(['code' => 'NGANLUONG-SEAMLESS', 'status' => 1])->one();
                if ($partner_payment != null) {
                    $partner_payment_acc = PartnerPaymentAccount::find()->where(['merchant_id' => $merchant['id'], 'partner_payment_id' => $partner_payment['id'], 'status' => 1])->one();
                    if ($partner_payment_acc != null) {
                        if ($method == 'qr') {
                            $method='QRCODE';
                            $bankID = Bank::find()->select(['id'])->where(['code' => $bank_code])->one();
                            if ($bankID != null) {
                                $bankID = $bankID['id'];
                                $bank = PaymentMethod::find()->select(['bank_id'])->where(['status' => 1])->andWhere(['bank_id' => $bankID])->andWhere(['like', 'code', 'QR-CODE'])->count();
                                if ($bank > 0) {
                                    if ($transaction==null){
                                        $payment_method=PaymentMethod::find()->select(['id'])->where(['code'=>$bank_code.'-QR-CODE'])->one();
                                        $payment_method_id='';
                                        if ($payment_method!=null){
                                            $payment_method_id=$payment_method['id'];
                                        }else{
                                            $response['code'] = '0003';
                                            $response['message'] = 'Payment method not set.';
                                        }
                                        $params=[
                                            'checkout_order_id' => $checkout_order['id'],
                                            'payment_method_id' => $payment_method_id,
                                            'partner_payment_id' => $partner_payment['id'],
                                            'partner_payment_method_refer_code' => '',
                                            'amount' => $checkout_order['amount'],
                                            'currency' => 'VND',
                                            'user_id' => \Yii::$app->user->id
                                        ];
                                        $transaction_update= TransactionBusiness::addPaymentTransaction($params);
                                        $transaction= Transaction::findOne($transaction_update['id']);
                                    }

                                    $inputs = array(
                                        'receiver_email' => '',
                                        'cur_code' => 'VND',
                                        'order_code' => $GLOBALS['PREFIX'] . $checkout_order['transaction_id'],
                                        'total_amount' => $checkout_order['amount'],
                                        'payment_method' => $method,
                                        'bank_code' => $bank_code,
                                        'tax_amount'=>0,
                                        'fee_shipping' => 0,
                                        'discount_amount' => 0,
                                        'order_description' => 'Thanh toán giao dịch ' . $checkout_order['transaction_id'] . ' cho đơn hàng ' . $checkout_order['order_code'],
                                        'return_url' => $checkout_order['return_url'],
                                        'cancel_url' => $checkout_order['cancel_url'],
                                        'notify_url' => $checkout_order['notify_url'],
                                        'buyer_fullname' => $checkout_order['buyer_fullname'],
                                        'buyer_email' => $checkout_order['buyer_email'],
                                        'buyer_mobile' => $checkout_order['buyer_mobile'],
                                        'buyer_address' => $checkout_order['buyer_address'],
                                        'card_fullname' => '',
                                        'card_number' => '',
                                        'card_month' => '',
                                        'card_year' => '',
                                        'total_item' => 1,
                                    );
                                    $nganluong_seamless= NganLuongSeamless::checkout($inputs,$checkout_order['merchant_id'],$partner_payment['id']);
                                    //print_r($nganluong_seamless); die();
                                    if (isset($nganluong_seamless['error_code'])&& $nganluong_seamless['error_code']!='00'){
                                        $response['code']='0999';
                                        $response['message']=$nganluong_seamless['description'];
                                    }
                                    else{
                                        if (isset($nganluong_seamless['qr_data'])&& $nganluong_seamless['qr_data']!=''){
                                            $checkout_order->status=2;
                                            $transaction->status=2;
                                            if ($checkout_order->save(false)&& $transaction->save(false)){
                                                $qr_encoded_data = $nganluong_seamless['qr_data'];
                                            }else{
                                                $response['code']='0009';
                                                $response['message']='Transaction update error.';
                                            }
                                        }else{
                                            $qr_encoded_data = $data;
                                        }
                                        $response['code'] = '0000';
                                        $response['message'] = 'QR code successfully generated.';
                                    }
                                } else {
                                    $response['code'] = '0008';
                                    $response['message'] = 'Invalid bank code.';
                                }
                            } else {
                                $response['code'] = '0008';
                                $response['message'] = 'Invalid bank code.';
                            }
                        } else {
                            $response['code'] = '0004';
                            $response['message'] = 'Invalid method.';
                        }
                    } else {
                        $response['code'] = '0005';
                        $response['message'] = 'Invalid partner payment account. Contact VCB payment gateway support for more information.';
                    }
                } else {
                    $response['code'] = '0006';
                    $response['message'] = 'Invalid partner payment channel. Contact VCB payment gateway support for more information.';
                }
            } else {
                $response['code'] = '0007';
                $response['message'] = 'Checkout order amount does not meet minimum requirement.';
            }
        } else {
            $response['code'] = '0002';
            $response['message'] = 'Invalid token code.';
        }
        $response['data_qr'] = $qr_encoded_data;
        if ($response['code'] == '0000') {
            $response['guide'] = 'The returned data was encoded using base64, use a base64 to image converter to get the final result, refer to https://codebeautify.org/base64-to-image-converter for example.';
        }

        return $response;
    }
}