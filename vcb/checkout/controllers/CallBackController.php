<?php

namespace checkout\controllers;

use checkout\components\CheckoutController;
use checkout\components\Encryption;
use checkout\components\MerchantCheckoutController;
use common\components\libs\NotifySystem;
use common\models\business\CheckoutOrderCallbackBusiness;
use common\models\business\SendMailBussiness;
use common\models\business\TransactionBusiness;
use common\models\db\CheckoutOrderCallback;
use common\models\db\Merchant;
use common\models\db\PartnerPayment;
use common\models\db\PartnerPaymentAccount;
use common\models\db\PaymentMethod;
use common\models\db\Transaction;
use common\models\db\UserLogin;
use common\payments\CyberSource;
use common\payments\CyberSourceVcb;
use common\payments\MSBVA;
use Couchbase\TermRangeSearchQuery;
use Yii;
use common\components\utils\Logs;
use yii\web\Controller;
use common\components\utils\ObjInput;
use common\models\db\CheckoutOrder;
use common\components\libs\Tables;
use common\models\business\CheckoutOrderBusiness;
use yii\web\Response;

date_default_timezone_set('Asia/Bangkok'); // Set Time Zone required tu PHP 5
define('CALL_URL', 'https://merchant.vimo.vn/merchant/v1/request.php');
define('VIMO_MASTER_MERCHANT_ID', 1118823); // mặc định lấy master id do vimo cấp
//define('CALL_URL', 'https://dev-xmoney-web.vimo.vn/merchant/v1/request.php');

class CallBackController extends Controller
{
    const STATUS_NEW = 1;
    const STATUS_PROCESSING = 2;
    const STATUS_ERROR = 3;
    const STATUS_SUCCESS = 4;
    public $transaction_id = 0;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        Yii::$app->request->enableCsrfValidation = false;
    }


    public function actionAlepay()
    {
        $status = '99';
        $params = [];
        $file_name = 'alepay' . DS . 'notify' . DS . date("Ymd", time()) . ".txt";
        $data_input = file_get_contents("php://input");
        self::_writeLog($file_name, '[DATA_CALLBACK]' . $data_input);

        $data = json_decode($data_input, true);
        Logs::writeELKLog($data, 'nl-vietcombank-callback', 'INPUT', __FUNCTION__, '', 'callback/alepay');
        if (!empty($data['transactionInfo'])) {
            $this->transaction_id = str_replace($GLOBALS['PREFIX'], '', $data['transactionInfo']['orderCode']);
            $transaction = Tables::selectOneDataTable('transaction', ['id = :id', 'id' => $this->transaction_id]);

            $status = $data['transactionInfo']['status'];
            $params = array(
                'transaction_id' => $this->transaction_id,
                'checkout_order_id' => $transaction['checkout_order_id'],
                'sender_fee' => $data['transactionInfo']['payerFee'],
                'receiver_fee' => $data['transactionInfo']['merchantFee'],
                'time_paid' => $transaction['time_paid'],
                'user_id' => $transaction['user_paid'],
                'month' => $data["transactionInfo"]['month'],
                'installmet_info' => json_encode($data),

            );

            if ($status == '000') {
                $result = CheckoutOrderBusiness::updateStatusInstallMentPaid($params, 'false');
                if (empty($result['error_message']) && !empty($result['notify_url'])) {

                    $checkout_order_callback = CheckoutOrderCallback::findOne(['checkout_order_id' => $this->transaction_info['checkout_order_id']]);

                    if (!empty($checkout_order_callback)) {
                        CheckoutOrderCallback::process($checkout_order_callback);
                    }
                }
                self::_writeLog($file_name, '[RESULT_CALLBACK|SUCCESS]' . json_encode($result));
                Logs::writeELKLog($result, 'nl-vietcombank-callback', 'OUTPUT', __FUNCTION__, '', 'callback/alepay');

                return 'SUCCESS:' . json_encode($result);
            } elseif ($status == '150') {
                $result = CheckoutOrderBusiness::updateStatusReview($params, 'false');

                self::_writeLog($file_name, '[REVIEW|SUCCESS]' . json_encode($result));
                Logs::writeELKLog($result, 'nl-vietcombank-callback', 'OUTPUT', __FUNCTION__, '', 'callback/alepay');

                return 'REVIEW:' . json_encode($result);
            } elseif ($status == '155') {
                $result = CheckoutOrderBusiness::updateStatusAcceptReview($params, 'false');

                self::_writeLog($file_name, '[ACCEPT_REVIEW|SUCCESS]' . json_encode($result));
                Logs::writeELKLog($result, 'nl-vietcombank-callback', 'OUTPUT', __FUNCTION__, '', 'callback/alepay');

                return 'ACCEPT_REVIEW:' . json_encode($result);
            } else {
                $result = CheckoutOrderBusiness::updateStatusInstallMentCancel($params, 'false');
                self::_writeLog($file_name, '[RESULT_CALLBACK|ERROR]' . json_encode($result));
                Logs::writeELKLog($result, 'nl-vietcombank-callback', 'OUTPUT', __FUNCTION__, '', 'callback/alepay');

                return 'ERROR:' . json_encode($result);

            }
        }
    }

    /** qrcode_vcb */
    public function actionQrcodeVcb()
    { // chỉ khi thanh công thì mới GW notify về mình
        // check IP
        Yii::$app->response->format = Response::FORMAT_JSON;
        $ip = get_client_ip();
        $file_name = 'qrcode_vcb' . DS . 'notify' . DS . date("Ymd", time()) . ".txt";


//        var_dump($ip);die();
        if (in_array($ip, [
//            "::1",
            '14.177.239.244',
            '103.109.33.33', // TEST
            '103.109.32.38', '103.109.32.39', '103.109.32.41'// LIVE
        ])) {
//            $data_input = file_get_contents("php://input");
            $data_input = $_POST['params'];
            self::_writeLog($file_name, '[DATA_CALLBACK]' . $data_input);
            $data = json_decode($data_input, true);
            Logs::writeELKLog($data, 'nl-vietcombank-callback', 'INPUT', __FUNCTION__, '', 'callback/vcb');
            $result_final = [];

            //get checkout_order_id
//            $checkout_order_id = substr($data['bill_no'], 12); // sau này chuyển thành ->bill_no
            $transaction_id = substr($data['txnId'], 12);
            $transaction = Transaction::findOne($transaction_id);

            $notify_url = '';
            $checkout_order_id = 0;
            $bank_refer_code = '';
            if ($transaction != null) {
                // lưu bankCode - Mã ngân hàng thanh toán
                $bank_code_payment = @$data['bankCode'];
                $transaction->bank_code_payment = $bank_code_payment;
                if ($transaction->save()) {
                    self::_writeLog($file_name, '[BANK_CODE_PAYMENT][SAVED]: ' . $bank_code_payment);
                } else {
                    self::_writeLog($file_name, '[BANK_CODE_PAYMENT][UNSAVED]: ' . $bank_code_payment);
                }
                $checkout_order_id = $transaction->checkout_order_id;
                $checkout_order = CheckoutOrder::findOne($checkout_order_id);
                if ($checkout_order != null) {
                    $notify_url = $checkout_order->notify_url;
                    if ($checkout_order->status == CheckoutOrder::STATUS_PAID) {
                        $result_callback = ['code' => '08', 'message' => 'Đơn hàng đã được thanh toán', 'data' => ['txnId' => $data['txnId']]];
                        self::_writeLog($file_name, '[RESULT] ' . json_encode($result_callback));
                        return $result_callback;
                    }
                }
                $partner_payment = PartnerPayment::findOne($transaction->partner_payment_id);
                if ($partner_payment != null) {
                    if ($partner_payment->code != 'VCB') { // Check nếu đẩy live
                        $result_callback = ['code' => '08', 'message' => 'Đơn hàng không hợp lệ', 'data' => ['txnId' => $data['txnId']]];
                        self::_writeLog($file_name, '[RESULT] ' . json_encode($result_callback));
                        return $result_callback;
                    }
                }
                $bank_refer_code = $data['txnId'];
                $params = array(
                    'transaction_id' => $transaction_id,
                    'time_paid' => time(),
                    'bank_refer_code' => $bank_refer_code,
                    'user_id' => 0
                );
                $result = TransactionBusiness::paid($params);
                if ($result['error_message'] == '') {
                    if (in_array($checkout_order['merchant_id'], [193, 194, 120, 1434,1387,1960,263,203,267,3353,3132,133, 1374, 169, 877])) {
                        $result_final = array('code' => '00', 'message' => 'đặt hàng thành công', 'data' => ['txnId' => $data['txnId']]);
                    }
//                    else if (in_array($checkout_order['merchant_id'], $GLOBALS['MERCHANT_BUUDIEN'])) {
//                        $result_final = array('code' => '00', 'message' => 'đặt hàng thành công', 'data' => ['txnId' => $data['txnId']]);
//                    }
                    else if (in_array($checkout_order['merchant_id'], $GLOBALS['MERCHANT_XANHPON_NOT_NHA_THUOC']) && $checkout_order['time_created'] > 1736224920) {
                        $result_final = array('code' => '00', 'message' => 'đặt hàng thành công', 'data' => ['txnId' => $data['txnId']]);
                    }
                    else {
                        self::_writeLog($file_name, '[result_error_mess_of_trans_paid]' . $result['error_message']);
                        $checkout_order_callback = CheckoutOrderCallback::findOne(['checkout_order_id' => $checkout_order_id]);
                        self::_writeLog($file_name, '[checkout_order_callback_after_trans_paid]' . json_encode($checkout_order_callback->toArray()));
                        if (!empty($checkout_order_callback)) {
                            $result_callback = CheckoutOrderCallback::processCheckQr($checkout_order_callback);
                            Logs::writeELKLog($result_callback, 'nl-vietcombank-callback', 'OUTPUT', __FUNCTION__, '', 'callback/vcb');
                            self::_writeLog($file_name, '[result_callback_after_trans_paid]' . json_encode($result_callback));
                            if ($result_callback['error_message'] == 'SUCCESS') {
                                $result_final = array('code' => '00', 'message' => 'đặt hàng thành công', 'data' => ['txnId' => $data['txnId']]);
                            } elseif ($result_callback['error_message'] == 'REVERT') {
                                //update trên cổng về trạng thái revert, CLONE CÁC HÀM UPDATE THẤT BẠI CỔNG RA, CHỈ ĐỔI TÊN THÀNH REVERT LÀ XONG
                                $inputs = array(
                                    'transaction_id' => $transaction_id,
                                    'partner_payment_method_refer_code' => '',
                                    'user_id' => 0,
                                );
                                $failure = TransactionBusiness::revertQrVCBGateway($inputs);
                                self::_writeLog($file_name, '[RESULT_TRANS_REVERT]' . $failure['error_message']);
                                if ($failure['error_message'] === '') {
                                    $inputs = array(
                                        'checkout_order_id' => $checkout_order_id,
                                        'user_id' => '0',
                                    );
                                    $update_checkout_order_failure = CheckoutOrderBusiness::updateCheckoutOrderStatusRevert_QrVCBGateway($inputs, false);
                                    self::_writeLog($file_name, '[RESULT_CHECKOUT_ORDER_REVERT]' . $update_checkout_order_failure['error_message']);
                                    $result_final = array('code' => '07', 'message' => 'Thất bại: VCB thực hiện revert thành công',
                                        'data' => ['txnId' => $data['txnId']]);
                                }
                            }
                        }
                    }

                } else {
                    $result_final = array('code' => '08', 'message' => $result['error_message'],
                        'data' => ['txnId' => $data['txnId']]);
                }
            } else {
                $result_final = array(
                    'code' => '08',
                    'message' => 'Tham số đầu vào không hợp lệ',
                    'data' => [
                        'txnId' => $data['txnId']
                    ]);
            }
        } else {
            $result_final['code'] = '10';
            $result_final['message'] = 'IP không được truy cập';
            $result_final['data'] = [];
        }
        self::_writeLog($file_name, '[RESULT]' . json_encode($result_final));
        return $result_final;
//        exit();
    }

    public function actionCyberSource()
    {
        Logs::writeELKLog($_REQUEST, 'nl-vietcombank-callback', 'INPUT', __FUNCTION__, '', 'callback/cybersource');
        $pares_code = ObjInput::get('PaRes', 'def', '');
        $xid_code = ObjInput::get('MD', 'def', '');

        $token = Yii::$app->cache->get('TOKEN_3D_' . $xid_code);
        if (empty($token)) {
            $token = Yii::$app->session->get('TOKEN_3D_' . $xid_code);
        }
        $token_info = CyberSource::decryptSessionInfo($token);

        $cashin_id = $token_info['process_info']['cashin_id'];
        $inputs = array(
            'cashin_id' => $cashin_id,
            'cashin_amount' => $token_info['process_info']['cashin_amount'],
            'token' => $token_info['token'],
            'signedPARes' => $pares_code,
            'card_type' => $token_info['card_info']['card_type'],
            'last_name' => $token_info['card_info']['last_name'],
            'first_name' => $token_info['card_info']['first_name'],
            'account_number' => $token_info['card_info']['card_number'],
            'expiration_month' => $token_info['card_info']['card_month'],
            'expiration_year' => $token_info['card_info']['card_year'],
        );

        $checkout_order = CheckoutOrder::getCheckoutOrderById($cashin_id);
        if (empty($token_info)) {
            self::_redirectUrlError($checkout_order['token_code']);
        }

        $inputs_authorize3D = $inputs;
        $transaction = Transaction::getTransactionByCheckoutOrderId($cashin_id);
        if (!empty($transaction)) {
            $cbs_stb = new CyberSource($transaction['merchant_id'], $transaction['partner_payment_id']);
        } else {
            $result_code = 'REJECT';
            $error_message = 'Không tìm thấy giao dịch';
            self::_redirectUrlError($checkout_order['token_code'], $error_message);
        }

        $result = $cbs_stb->authorizeSubcription3D($inputs_authorize3D);
        if ($result['result']->decision == 'ACCEPT' && $result['result']->reasonCode == '100') {
            $eciRaw = @$result['result']->payerAuthValidateReply->eciRaw;
            $error_message = '';
            $bank_trans_id = $result['result']->requestID;
            if (!empty($eciRaw) && in_array($eciRaw, array('02', '05', '01', '06'))) { // success
                $result_code = 'ACCEPT';
                Yii::$app->cache->delete('TOKEN_3D_' . $xid_code);
                Yii::$app->session->remove('TOKEN_3D_' . $xid_code);

                $params = [
                    'checkout_order_id' => $cashin_id,
                    'transaction_id' => $transaction['id'],
                    'sender_fee' => $transaction['sender_fee'],
                    'receiver_fee' => $transaction['receiver_fee'],
                    'time_paid' => time(),
                    'user_id' => 0,
                    'bank_refer_code' => $token_info['token']
                ];

                $result = CheckoutOrderBusiness::updateStatusPaid($params, 'false');

                $checkout_order_callback = CheckoutOrderCallback::findOne(['checkout_order_id' => $cashin_id]);

                if (!empty($checkout_order_callback)) {
                    CheckoutOrderCallback::process($checkout_order_callback);
                }
            } else {
                $result_code = 'REJECT';
                $cbs_stb->cancelAuthorizeCard(array('token' => $token));
                $error_message = 'Không kiểm tra được thẻ, có thể bạn chưa đăng ký chức năng giao dịch qua Internet, vui lòng liên hệ ngân hàng phát hành thẻ để trợ giúp';
            }
        }
        $result_callback = [
            'result_code' => $result_code,
            'error_message' => $error_message
        ];
        Logs::writeELKLog($result_callback, 'nl-vietcombank-callback', 'OUTPUT', __FUNCTION__, '', 'callback/cybersource');
    }

    public function actionCyberSourceVcb()
    {
        CyberSource::_writeLog('CallBack[param][REQUEST]' . json_encode($_REQUEST));
        Logs::writeELKLog($_REQUEST, 'nl-vietcombank-callback', 'INPUT', __FUNCTION__, '', 'callback/cybersource_vcb');
        $paRes = ObjInput::get('PaRes', 'def', '');
        $transaction_checksum = ObjInput::get('transaction_checksum', 'def', '');
        $xid = ObjInput::get('xid', 'def', '');
        $token_code = ObjInput::get('token_code', 'def', '');

        $token = Yii::$app->cache->get('TOKEN_3D_' . $xid);
        if (empty($token)) {
            $token = Yii::$app->session->get('TOKEN_3D_' . $xid);
        }

        $cache = CyberSourceVcb::decryptSessionInfo($token);
        $cache['response_info']['paRes'] = $paRes;
        //Write log card
        $cache_log = $cache;
        unset($cache_log['card_info']);
        CyberSource::_writeLog('CallBack[data]' . json_encode($cache_log));
        Yii::$app->cache->set('TOKEN_3D_' . $xid, CyberSourceVcb::encryptSessionInfo($cache));
        Yii::$app->session->set('TOKEN_3D_' . $xid, CyberSourceVcb::encryptSessionInfo($cache));
        $verify_url = Yii::$app->urlManager->createAbsoluteUrl(['version_1_0/verify',
            'token_code' => $token_code,
            'transaction_checksum' => $transaction_checksum,
            'xid' => $xid], HTTP_CODE);
        CyberSource::_writeLog('CallBack[link_verify]' . $verify_url);
        Logs::writeELKLog($verify_url, 'nl-vietcombank-callback', 'OUTPUT', __FUNCTION__, '', 'callback/cybersource_vcb');
        header('Location:' . $verify_url);
        die();
    }

    public function actionCheckOrderByTransaction()
    {
        $data_input = file_get_contents("php://input");
        $datas = json_decode($data_input, true);
        if (!isset($datas['email_merchant']) || !isset($datas['transaction_id'])) {
            $result = [
                'error_message' => 'Tham số đầu vào không hợp lệ',
                'error_code' => '002',
            ];
            return json_encode($result);
        } else {

            $merchant = self::getMerchantByPartnerPayment($datas['merchant_id'], $datas['email_merchant']);


            $datas['merchant_id'] = $merchant['merchant_id'];
            $result = CheckoutOrderBusiness::checkOrderByTransaction($datas);
            return json_encode($result);
        }
    }

    public function actionCreateOrderSuccess()
    {
        $data_input = file_get_contents("php://input");
        $datas = json_decode($data_input, true);
        $file_name = 'vcb' . DS . 'create_order_success' . DS . date("Ymd", time()) . ".txt";
        self::_writeLog($file_name, '[VCB_ORDER][DATA_CALLBACK]' . json_encode($datas));
        $error_code = '';
        $channel = isset($_GET['channel']) ? $_GET['channel'] : '';
        if (!empty($datas)) {
            if ($channel == 'vimo') {
                $client_ip = self::get_client_ip();
                self::_writeLog($file_name, '[VCB_ORDER][CLIENT_IP]' . $client_ip);
                if ($client_ip != '103.109.32.88') {
                    return json_encode(['error_message' => 'Truy cập trái phép!', 'error_code' => 12]);
                } else {
                    $MerchantId = isset($datas['MerchantId']) ? $datas['MerchantId'] : '';
                    $TransactionId = isset($datas['TransactionId']) ? $datas['TransactionId'] : '';
                    $MasterMerchantId = VIMO_MASTER_MERCHANT_ID;
//                    $MasterMerchantId = PartnerPaymentAccount::findBySql("SELECT merchant.parent_id FROM partner_payment_account,merchant WHERE partner_payment_account.partner_merchant_id = '".$MerchantId."' AND merchant.id = partner_payment_account.merchant_id")->one();
                    return self::processChannelVimo($MasterMerchantId, $MerchantId, $TransactionId, $file_name);
                }
            } else {
                $checksum = self::makeChecksum($datas);
                if ($checksum == $datas['checksum']) {
                    if (in_array($datas['merchant_id'], ['65824', '65825'])) {
                        $merchant = self::getMerchantByPartnerPayment($datas['merchant_id'], $datas['email_merchant']);

                        self::_writeLog($file_name, '[VCB_ORDER][MERCHANT]' . json_encode($merchant));
                        if (!empty($merchant)) {
                            $param_create_order = [
                                'version' => '1.0',
                                'language_id' => 1, // vi
                                'merchant_id' => $merchant['merchant_id'],
                                'order_code' => isset($datas['order_code']) ? $datas['order_code'] : $GLOBALS['PREFIX'] . $datas['transaction_id'],
                                'order_description' => isset($datas['order_description']) ? $datas['order_description'] : 'Thanh toán đơn hàng mã giao dịch NL ' . $datas['transaction_id'],
                                'amount' => $datas['amount'],
                                'currency' => $datas['currency'],
                                'return_url' => '',
                                'cancel_url' => '',
                                'notify_url' => '',
                                'time_limit' => '',
                                'buyer_fullname' => $datas['buyer_fullname'],
                                'buyer_mobile' => $datas['buyer_mobile'],
                                'buyer_email' => $datas['buyer_email'],
                                'buyer_address' => $datas['buyer_address'],
                                'user_id' => 0,
                                'payment_method_id' => self::getPaymentMethodId($datas['bank_code'], $datas['method']),
                                'partner_payment_id' => 1, // Ngân lượng Seamless
                                'partner_payment_method_refer_code' => $datas['transaction_id'],
                            ];

                            if (!empty($datas['time_created'])) {
                                $param_create_order['time_created'] = $datas['time_created'];
                            }

                            self::_writeLog($file_name, '[VCB_ORDER][addAndRequestPayment][IN]' . json_encode($param_create_order));
                            $data_checkout = CheckoutOrderBusiness::addAndRequestPaymentForCallBack($param_create_order);
                            self::_writeLog($file_name, '[VCB_ORDER][addAndRequestPayment][OUT]' . json_encode($data_checkout));
                            if (!empty($data_checkout) && $data_checkout['error_message'] == "") {
                                $inputs = [
                                    'checkout_order_id' => $data_checkout['checkout_order_id'],
                                    'transaction_id' => $data_checkout['transaction_id'],
                                    'user_id' => 0,
                                ];
                                self::_writeLog($file_name, '[VCB_ORDER][updateStatusPaying][IN]' . json_encode($inputs));
                                $update_paying = CheckoutOrderBusiness::updateStatusPaying($inputs);
                                self::_writeLog($file_name, '[VCB_ORDER][updateStatusPaying][OUT]' . json_encode($update_paying));
                                if ($update_paying['error_message'] === '') {
                                    $inputs = array(
                                        'transaction_id' => $data_checkout['transaction_id'],
                                        'bank_refer_code' => $datas['transaction_id'],
                                        'time_paid' => isset($datas['time_success']) ? $datas['time_success'] : time(),
                                        'user_id' => 0,
                                    );
                                    self::_writeLog($file_name, '[VCB_ORDER][paid][IN]' . json_encode($inputs));
                                    $result = TransactionBusiness::paid($inputs);
                                    self::_writeLog($file_name, '[VCB_ORDER][paid][OUT]' . json_encode($result));
                                    if ($result['error_message'] === '') {
                                        $error_message = 'Thành công';
                                        $param_update_callback = [
                                            'checkout_order_id' => $data_checkout['checkout_order_id'],
                                            'user_id' => 0,
                                        ];
                                        CheckoutOrderBusiness::updateCallbackStatusSuccess($param_update_callback);
                                        $merchant_info = Merchant::findOne(['id' => $merchant['merchant_id']]);
                                        $user_info = UserLogin::findOne(['merchant_id' => $merchant['merchant_id']]);

                                        if ($merchant_info->is_sent == 1) {
                                            if (strpos($merchant_info->mail_sent, ',')) {
                                                $email_cc = explode(',', $merchant_info->mail_sent);

                                            } else {
                                                $email_cc = [];
                                            }

                                            SendMailBussiness::send(
                                                trim($user_info->email),
                                                'Thông báo giao dịch thành công',
                                                'noti_success',
                                                [
                                                    'order_description' => $datas['order_description'],
                                                    'order_code' => $param_create_order['order_code'],
                                                    'time_paid' => time(),
                                                    'payment_name' => $param_create_order['buyer_fullname'],
                                                    'payment_method' => !empty(self::getPaymentMethodName($datas['bank_code'], $datas['method'])) ? self::getPaymentMethodName($datas['bank_code'], $datas['method']) : '',
                                                    'amount' => $datas['order_amount'],
                                                    'currency' => $datas['currency'],
                                                    'transaction_id' => $data_checkout['transaction_id'],
                                                    'email' => $datas['buyer_email'],
                                                    'address' => $datas['buyer_address'],

                                                ], 'layouts/basic', $email_cc
                                            );
                                        }
                                    } else {
                                        $error_message = $result['error_message'];
                                    }
                                } else {
                                    $error_message = $update_paying['error_message'];
                                }
                            } else {
                                $error_message = $data_checkout['error_message'];
                            }
                        } else {
                            $error_code = '05';
                            $error_message = 'Merchant không hợp lệ';
                        }
                    } else {
                        $error_code = '05';
                        $error_message = 'Merchant không hợp lệ';
                    }

                } else {
                    $error_code = '06';
                    $error_message = 'Checksum không hợp lệ';
                }
            }
        } else {
            $error_code = '07';
            $error_message = 'Tham số đầu vào không hợp lệ';
        }

        self::_writeLog($file_name, '[VCB_ORDER][OUTPUT]' . $error_message);

        return json_encode(['error_message' => $error_message, 'error_code' => $error_code]);
    }


    private function checkMerchant($merchant, $merchant_nl_id, $merchant_nl_email)
    {
        $partner_payment_account = PartnerPaymentAccount::find()->select(['*'])
            ->where(['merchant_id' => $merchant['id'], 'partner_payment_id' => 1, 'status' => PartnerPaymentAccount::STATUS_ACTIVE])->asArray()->one(); // LẤY EMAIL NGÂN LƯỢNG CẤU HÌNH TRONG TÀI KHOẢN CẤU HÌNH KÊNH THANH TOÁN
        if ($partner_payment_account['partner_payment_account'] == $merchant_nl_email && $partner_payment_account['partner_merchant_id'] == $merchant_nl_id) {
            return true;
        }
        return false;
    }

    // Mỗi merchant được cấu hình bằng email ví của công bên Ngân Lượng và 1 merchant_id duy nhất(Tài khoản được tạo bằng kênh NganLuongSeamless)
    private function getMerchantByPartnerPayment($merchant_nl_id, $merchant_nl_email)
    {
        $partner_payment_account = PartnerPaymentAccount::find()->select(['*'])
            ->where(['partner_merchant_id' => $merchant_nl_id, 'partner_payment_account' => $merchant_nl_email, 'partner_payment_id' => 1, 'status' => PartnerPaymentAccount::STATUS_ACTIVE])->asArray()->one(); // LẤY EMAIL NGÂN LƯỢNG CẤU HÌNH TRONG TÀI KHOẢN CẤU HÌNH KÊNH THANH TOÁN
        return $partner_payment_account;

    }

    private function getPaymentMethodName($bank_code, $method)
    {
        $payment_method_code = self::convertPaymentMethodCode($bank_code, $method);
        $payment_method = PaymentMethod::findOne(['code' => $payment_method_code]);

        if (!empty($payment_method)) {
            return $payment_method['name'];
        }

        return false;
    }


    private function get_client_ip()
    {
        $ipaddress = '';
        if (isset($_SERVER['HTTP_CLIENT_IP']))
            $ipaddress = $_SERVER['HTTP_CLIENT_IP'];
        else if (isset($_SERVER['HTTP_X_FORWARDED_FOR']))
            $ipaddress = $_SERVER['HTTP_X_FORWARDED_FOR'];
        else if (isset($_SERVER['HTTP_X_FORWARDED']))
            $ipaddress = $_SERVER['HTTP_X_FORWARDED'];
        else if (isset($_SERVER['HTTP_FORWARDED_FOR']))
            $ipaddress = $_SERVER['HTTP_FORWARDED_FOR'];
        else if (isset($_SERVER['HTTP_FORWARDED']))
            $ipaddress = $_SERVER['HTTP_FORWARDED'];
        else if (isset($_SERVER['REMOTE_ADDR']))
            $ipaddress = $_SERVER['REMOTE_ADDR'];
        else
            $ipaddress = 'UNKNOWN';
        return $ipaddress;
    }

    private function processChannelVimo($MasterMerchantId, $MerchantId, $TransactionId, $file_name)
    {
        $PartnerPaymentAccount = PartnerPaymentAccount::findOne(["partner_merchant_id" => (int)$MerchantId]);
        if (empty($PartnerPaymentAccount)) {
            return json_encode(['error_message' => 'Chưa cấu hình tài khoản kênh thanh toán!', 'error_code' => 11]);
        }
        $merchant_encry = $PartnerPaymentAccount['partner_merchant_password'];
        $merchant_checksum = $PartnerPaymentAccount['checksum_key'];
        self::_writeLog($file_name, '[VCB_ORDER][KEY|CHECKSUM|MID_VCB][' . $TransactionId . ']' . $merchant_encry . '|' . $merchant_checksum . '|' . $PartnerPaymentAccount['merchant_id']);
        $detail = self::getOrderDetailVimo($TransactionId, $MasterMerchantId, $file_name, $merchant_encry, $merchant_checksum);
        self::_writeLog($file_name, '[VCB_ORDER][CHECK_VIMO_TRANSACTION][' . $TransactionId . ']' . json_encode($detail));
        $transaction_detail = json_decode($detail['data'], true);
        $error_vimo = $detail['error'];
        if ($error_vimo == '00' && $transaction_detail) {
            if (!empty($transaction_detail['Status']) == 2) {
                $merchant = Merchant::findOne(["id" => (int)$PartnerPaymentAccount['merchant_id']]);
                self::_writeLog($file_name, '[VCB_ORDER][MERCHANT][' . $TransactionId . ']' . json_encode($merchant));
                if (!empty($merchant)) {
                    $param_create_order = [
                        'version' => '1.0',
                        'language_id' => 1, // vi
                        'merchant_id' => $merchant['id'],
                        'order_code' => $transaction_detail['OrderCode'],
                        'order_description' => 'Thanh toán đơn hàng mã giao dịch ' . $TransactionId,
                        'amount' => $transaction_detail['AmountPayment'],
                        'currency' => $transaction_detail['Currency'],
                        'return_url' => '',
                        'cancel_url' => '',
                        'notify_url' => '',
                        'time_limit' => '',
                        'buyer_fullname' => isset($transaction_detail['buyer_fullname']) ? $transaction_detail['buyer_fullname'] : '',
                        'buyer_mobile' => isset($transaction_detail['buyer_mobile']) ? $transaction_detail['buyer_mobile'] : '',
                        'buyer_email' => isset($transaction_detail['buyer_email']) ? $transaction_detail['buyer_email'] : '',
                        'buyer_address' => isset($transaction_detail['buyer_address']) ? $transaction_detail['buyer_address'] : '',
                        'user_id' => 0,
                        'payment_method_id' => self::getPaymentMethodId($transaction_detail['bank_code'], 'QRCODE_OFFLINE'),
                        'partner_payment_id' => $PartnerPaymentAccount['partner_payment_id'],
                        'partner_payment_method_refer_code' => $TransactionId,
                    ];

                    if (!empty($transaction_detail['TimeCreated'])) {
                        $param_create_order['time_created'] = strtotime($transaction_detail['TimeCreated']);
                    }

                    self::_writeLog($file_name, '[VCB_ORDER][addAndRequestPayment][IN][' . $TransactionId . ']' . json_encode($param_create_order));
                    $data_checkout = CheckoutOrderBusiness::addAndRequestPayment($param_create_order);
                    self::_writeLog($file_name, '[VCB_ORDER][addAndRequestPayment][OUT][' . $TransactionId . ']' . json_encode($data_checkout));
                    if (!empty($data_checkout) && $data_checkout['error_message'] == "") {
                        $inputs = [
                            'checkout_order_id' => $data_checkout['checkout_order_id'],
                            'transaction_id' => $data_checkout['transaction_id'],
                            'user_id' => 0,
                        ];
                        self::_writeLog($file_name, '[VCB_ORDER][updateStatusPaying][IN][' . $TransactionId . ']' . json_encode($inputs));
                        $update_paying = CheckoutOrderBusiness::updateStatusPaying($inputs);
                        self::_writeLog($file_name, '[VCB_ORDER][updateStatusPaying][OUT][' . $TransactionId . ']' . json_encode($update_paying));
                        if ($update_paying['error_message'] === '') {
                            $inputs = array(
                                'transaction_id' => $data_checkout['transaction_id'],
                                'bank_refer_code' => $TransactionId,
                                'time_paid' => strtotime($transaction_detail['TimePerformed']),
                                'user_id' => 0,
                            );
                            self::_writeLog($file_name, '[VCB_ORDER][paid][IN][' . $TransactionId . ']' . json_encode($inputs));
                            $result = TransactionBusiness::paid($inputs);
                            self::_writeLog($file_name, '[VCB_ORDER][paid][OUT][' . $TransactionId . ']' . json_encode($result));
                            if ($result['error_message'] === '') {
                                $error_message = 'Thành công';
                                $error_code = '00';
                                $param_update_callback = [
                                    'checkout_order_id' => $data_checkout['checkout_order_id'],
                                    'user_id' => 0,
                                ];
                                CheckoutOrderBusiness::updateCallbackStatusSuccess($param_update_callback);
                            } else {
                                $error_code = '01';
                                $error_message = $result['error_message'];
                            }
                        } else {
                            $error_code = '02';
                            $error_message = $update_paying['error_message'];
                        }
                    } else {
                        $error_code = '03';
                        $error_message = $data_checkout['error_message'];
                    }
                } else {
                    $error_code = '05';
                    $error_message = 'Merchant không hợp lệ';
                }
            } else {
                $error_code = '10';
                $error_message = 'Trạng thái giao dịch trên Vimo App Merchant không hợp lệ !';
            }
        } else {
            $error_code = '08' . '|' . $error_vimo;
            $error_message = 'Giao dịch không tồn tại Vimo App Merchant !';
        }
        self::_writeLog($file_name, '[VCB_ORDER][OUTPUT][' . $TransactionId . ']' . $error_message);

        return json_encode(['error_message' => $error_message, 'error_code' => $error_code]);
    }

    private static function getOrderDetailVimo($TransactionId, $MerchantId, $file_name, $merchant_encry, $merchant_checksum)
    {
        $data = [
            'TransactionId' => $TransactionId,
        ];
        $data = json_encode($data);
        self::_writeLog($file_name, '[VCB_ORDER][INPUT_CHECK_VIMO_TRANSACTION][' . $TransactionId . ']' . $data);
        $EncData = (new Encryption())->encryptAes($data, $merchant_encry);
        $Func = "getTransaction";
        $Ver = '1.0';
        $CheckSum = md5($Func . $Ver . $MerchantId . $EncData . $merchant_checksum);
        $inputs = array(
            'Fnc' => $Func,
            'Ver' => $Ver,
            'MerchantId' => $MerchantId,
            'EncData' => $EncData,
            'Checksum' => $CheckSum,
        );
        $inputs = json_encode($inputs);
        self::_writeLog($file_name, '[VIMO][INPUT]' . $inputs);
        $data = self::postUrl(CALL_URL, $inputs);
        self::_writeLog($file_name, '[VIMO][OUTPUT]' . json_encode($data));
        if (isset($data['RespCode']) == '00') {
            $dataReturn = (new Encryption())->decryptAes($data['EncData'], $merchant_encry);
            return ['error' => $data['RespCode'], 'data' => $dataReturn];
        }
        return ['error' => $data['RespCode'], 'data' => ''];
    }

    private static function postUrl($url, $data)
    {
        //Định nghĩa Header khi gọi
        $headerArray = array(
            'Content-Type: application/json; charset=UTF-8',
        );

        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headerArray);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_TIMEOUT, 60);

        $result = curl_exec($ch);
        $result = json_decode($result, true);
        return $result;
    }

    private static function makeChecksum($data)
    {
        if (!empty($data)) {
            $str_checksum = $data['email_merchant']
                . $data['transaction_id']
                . $data['amount']
                . $data['buyer_fullname']
                . $data['bank_code']
                . $data['method'];


            $file_name = 'vcb' . DS . 'create_order_success' . DS . date("Ymd", time()) . ".txt";
            self::_writeLog($file_name, '[VCB_ORDER][STR_CHECKSUM]' . $str_checksum);

            $checksum = hash_hmac('sha256', $str_checksum . '|' . $data['email_merchant'], 'VCB_NL');
            self::_writeLog($file_name, '[VCB_ORDER][STR_CHECKSUM]' . $checksum);

            return $checksum;
        }

        return false;
    }

    private function getPaymentMethodId($bank_code, $method)
    {
        $payment_method_code = self::convertPaymentMethodCode($bank_code, $method);
        $payment_method = PaymentMethod::findOne(['code' => $payment_method_code]);

        if (!empty($payment_method)) {
            return $payment_method['id'];
        }

        return false;
    }

    private function convertPaymentMethodCode($bank_code, $method)
    {
        $payment_method_code = '';
        if ($bank_code == 'SCB') {
            $bank_code = 'STB';
        } elseif ($bank_code == 'NAB') {
            $bank_code = 'NCB';
        } elseif ($bank_code == 'NL') {
            $bank_code = 'NGANLUONG';
        }

        if ($method == 'ATM_ON' || $method == 'ATM_ONLINE') {
            $payment_method = 'ATM-CARD';
        } elseif ($method == 'IB_ON' || $method == 'IB_ONLINE') {
            $payment_method = 'IB-ONLINE';
        } elseif ($method == 'WALLET') {
            $payment_method = 'WALLET';
        } elseif ($method == 'CREDIT_CARD') {
            $payment_method = 'CREDIT-CARD';
        } elseif ($method == 'CASH_IN_SHOP') {
            $payment_method = 'CASH-IN-SHOP';
        } elseif ($method == 'QRCODE') {
            $payment_method = 'QR-CODE';
        } elseif ($method == 'QRCODE_OFFLINE') {
            $payment_method = 'QRCODE_OFFLINE';
        }

        $payment_method_code = $bank_code . '-' . $payment_method;

        return $payment_method_code;
    }

    private static function _writeLog($file_name, $data)
    {
        $pathinfo = pathinfo($file_name);
        Logs::create($pathinfo['dirname'], $pathinfo['basename'], $data);
    }

    public function _getUrlSuccess($token_code)
    {
        return Yii::$app->urlManager->createAbsoluteUrl(['version_1_0/success', 'token_code' => $token_code], HTTP_CODE);
    }

    public function _redirectUrlError($token_code, $error_message = null)
    {
        $error_message = base64_encode(base64_encode($error_message));
        $error_url = Yii::$app->urlManager->createAbsoluteUrl(['version_1_0/warning', 'token_code' => $token_code, 'error_message' => $error_message], HTTP_CODE);
        header('Location:' . $error_url);
        die();
    }

    public function actionQrcodeMsbVa()
    {
        Yii::$app->response->format = Response::FORMAT_JSON;
        $file_name = 'partner_payment_callback' . DS . 'msb_va' . DS . date("Ymd", time()) . ".txt";
        $data_input = Yii::$app->request->post('data');
        @self::_writeLog($file_name, '[DATA_CALLBACK]' . $data_input);

        $transaction_id = json_decode($data_input, true)['cashin_id'];
        $bank_transaction_id = json_decode($data_input, true)['bank_transaction_id'];
        $transaction_amount = json_decode($data_input, true)['transaction_amount'];

        $transaction_info = Transaction::find()
            ->where(['id' => $transaction_id])
            ->andWhere(['status' => Transaction::STATUS_PAYING])
            ->one();
        if ($transaction_info) {
            if ($transaction_info['partner_payment_id'] == 19) {// 23: sandbox; live : 19
                if ($transaction_amount == Transaction::getPartnerPaymentAmount($transaction_info)) {
                    $params = array(
                        'transaction_id' => $transaction_id,
                        'time_paid' => time(),
                        'bank_refer_code' => $bank_transaction_id,
                        'user_id' => 0
                    );
                    $result = TransactionBusiness::paid($params);
                    if ($result['error_message'] == '') {
                        $checkout_order_id = $transaction_info['checkout_order_id'];
                        $checkout_order_callback = CheckoutOrderCallback::findOne(['checkout_order_id' => $checkout_order_id]);
                        if (!empty($checkout_order_callback)) {
                            CheckoutOrderCallback::process($checkout_order_callback);
                            $result_gw = [
                                'status' => true,
                                'error_code' => "0000",
                            ];
                        } else {
                            $result_gw = [
                                'status' => false,
                                'error_code' => "0001",
                            ];
                        }
                    } else {
                        $result_gw = [
                            'status' => false,
                            'error_code' => "002",
                        ];
                    }
                } else {
                    $result_gw = [
                        'status' => false,
                        'error_code' => "003",

                    ];
                }
            } else {
                $result_gw = [
                    'status' => false,
                    'error_code' => "0004",
                ];
            }
        } else {
            $result_gw = [
                'status' => false,
                'error_code' => "0005",
            ];
        }

        return $result_gw;
    }

    public function actionTestUrl()
    { // giả lập link thành công


//        $result_message = 'Thành công hehe';
//        $error_code = '00';
//        return json_encode(['error_code' => $error_code, 'result_message' => $result_message]);
    }
}