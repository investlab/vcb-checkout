<?php

namespace checkout\controllers;

use common\components\libs\Tables;
use common\components\utils\ObjInput;
use common\components\utils\Translate;
use common\models\business\CheckoutOrderBusiness;
use common\models\business\CheckoutOrderCallbackBusiness;
use common\models\business\PaymentMethodBusiness;
use common\models\business\TransactionBusiness;
use common\models\db\CheckoutOrder;
use common\models\db\CheckoutOrderCallback;
use common\models\db\Merchant;
use common\models\db\MerchantFee;
use common\models\db\Method;
use common\models\db\PartnerPayment;
use common\models\db\PartnerPaymentAccount;
use common\models\db\PaymentMethod;
use common\models\db\Transaction;
use common\models\db\TransactionType;
use common\payment_methods\cyber_source_vcb_3ds2\PaymentMethodCreditCardCyberSourceVcb3ds2;
use common\payment_methods\cyber_source_vcb_3ds2\PaymentMethodCreditCardCyberSourceVcb3ds2MultipleCreditCardForm;
use common\payment_methods\cyber_source_vcb_3ds2\PaymentMethodCreditCardCyberSourceVcb3ds2VisaCreditCardForm;
use common\payment_methods\nganluong\PaymentMethodAtmCardNganluongForm;
use common\payment_methods\nganluong_seamless\PaymentMethodAtmCardNganluongSeamlessForm;
use common\payments\CyberSourceVcb3ds2;
use common\payments\NganLuongSeamless;
use Yii;
use yii\captcha\CaptchaAction;
use yii\validators\Validator;

class Version_3_0Controller extends Version_1_0Controller
{
    public $layout = 'version_3_0';

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->viewPath = '@checkout/views/version_3_0';
    }

    public function beforeAction($action)
    {
        if (parent::beforeAction($action)) {
            $language = Yii::$app->request->get('location');
            if (in_array($language, ['en'])) { // Add your supported languages here
                Yii::$app->language = 'en-US';
            } else {
                Yii::$app->language = 'vi'; // Default language
            }
            return true;
        }
        return false;
    }

    public function actionIndex()
    {

        if (intval($this->checkout_order['time_limit']) <= time()) {
            $this->redirectWarningPage('Đơn đặt hàng đã hết hạn thanh toán. Vui lòng hoàn quay lại tạo đơn hàng mới!');
        }
        if ($this->checkout_order['status'] == CheckoutOrder::STATUS_CANCEL) {
            if ($this->checkout_order['cancel_url'] != '') {
                header('Location:' . $this->checkout_order['cancel_url']);
                die();
            }
        }
        if ($this->checkout_order['status'] == CheckoutOrder::STATUS_FAILURE) {
            $this->redirectWarningPage('Đơn hàng thất bại. Vui lòng tạo đơn hàng mới!');
//            $this->redirectWarningPage('The order has been processed payment with bank in previous working turn. You have to finish the payment in that turn or back to the seller’s website to create a new order!');
        }
        if ($this->checkout_order['status'] != CheckoutOrder::STATUS_NEW) {
            $this->redirectWarningPage('Đơn đặt hàng đang được xử lý thanh toán. Vui lòng hoàn tất thanh toán trong lượt đó hoặc quay lại tạo đơn hàng mới!');
//            $this->redirectWarningPage('The order has been processed payment with bank in previous working turn. You have to finish the payment in that turn or back to the seller’s website to create a new order!');
        }
        //-----------
        $method_code = ObjInput::get('method_code', 'str', '');
        $payment_method_code = ObjInput::get('payment_method_code', 'str', '');
        $partner_payment_code = ObjInput::get('partner_payment_code', 'str', '');
        $payment_amount = $this->checkout_order['amount'];
        $methods = Method::getPaymentMethods($method_code, $payment_amount, time());
        if (!empty($method_code)) {
            foreach ($methods as $key => $item) {
                if ($item['code'] != $method_code) {
                    unset($methods[$key]);

                }
            }
        }

        if (!empty($methods)) {
            //---------
            $models = array();
            $error_message = '';
            foreach ($methods as $method) {
                $code = strtolower($method['code']);
                $model_form_name = Method::getModelFormName($code);
                if (class_exists($model_form_name)) {
                    $models[$code] = new $model_form_name($method, Yii::$app->controller->id, ($method_code == $code));
                    $models[$code]->checkout_order = $this->checkout_order;
                    if ($models[$code]->loadPaymentModels($payment_amount, 'index', $payment_method_code,
                        $partner_payment_code, $this->transaction, true)) {
                        if ($models[$code]->payment_model_active != null && $models[$code]->payment_model_active->isSubmit($partner_payment_code,
                                Yii::$app->request->post())) {
                            $models[$code]->payment_model_active->submit();
                        }
                    }
                }
            }
            //-------------
            $status_installment = Tables::selectOneDataTable('installment_config',
                'merchant_id = ' . $this->checkout_order['merchant_id'], '', 'status');
            if ($status_installment == true && (int)$status_installment['status'] == 0) {
                $models['tra-gop'] = '';
            }
            $bank_installment = Tables::selectOneDataTable('installment_config',
                'merchant_id = ' . $this->checkout_order['merchant_id'], '', 'card_accept');
            if ($bank_installment == true) {
                foreach (json_decode($bank_installment['card_accept'], true) as $item => $value) {
                    $list_bank_installment[$item . '-TRA-GOP'] = $item . '-TRA-GOP';
                }
                return $this->render('index', array(
                    'checkout_order' => $this->checkout_order,
                    'transaction' => $this->transaction,
                    'models' => $models,
                    'methods' => $methods,
                    'error_message' => $error_message,
                    'list_bank_installment' => @$list_bank_installment
                ));
            }
            return $this->render('index', array(
                'checkout_order' => $this->checkout_order,
                'transaction' => $this->transaction,
                'models' => $models,
                'methods' => $methods,
                'error_message' => $error_message,
            ));
        }
    }

    public function actionVerify()
    {
        if ($this->checkout_order['status'] == CheckoutOrder::STATUS_CANCEL) {
            if ($this->checkout_order['cancel_url'] != '') {
                header('Location:' . $this->checkout_order['cancel_url']);
                die();
            }
        }
        if (!in_array($this->checkout_order['status'],
                array(CheckoutOrder::STATUS_PAYING)) && $this->transaction != false) {
            if ($this->checkout_order['status'] == CheckoutOrder::STATUS_PAID) {
                $url_success = self::_getUrlSuccess($this->checkout_order['token_code']);
                $this->redirect($url_success);
            } elseif ($this->checkout_order['status'] == CheckoutOrder::STATUS_REVERT) {
                $url_revert = self::_getUrlRevert($this->checkout_order['token_code']);
                $this->redirect($url_revert);
            } else {
                $this->redirectErrorPage('Địa chỉ trang truy cập không tồn tại');
            }
        }
        //-----------
        $error_message = '';
        $payment_method_info = PaymentMethodBusiness::getInfoByPaymentMethodId($this->transaction['payment_method_id'],
            $this->transaction['partner_payment_id']);

        if ($payment_method_info != false) {
            $model_payment_method_name = PaymentMethod::getModelFormName($payment_method_info['partner_payment_code'],
                $payment_method_info['method_code'], $payment_method_info['code']);
            $model = new $model_payment_method_name();
            $model->set($this->checkout_order['amount'], Yii::$app->controller->id, 'verify', $payment_method_info,
                $payment_method_info['partner_payment_code'], $payment_method_info['partner_payment_id'],
                $this->transaction);
            $model->active = true;
            $model->checkout_order = $this->checkout_order;
            $model->load(Yii::$app->request->get());
            $model->initOption();
            if ($model->isSubmit($payment_method_info['partner_payment_code'], Yii::$app->request->post())) {
                // Loại bỏ rule liên quan đến captcha - ATM CARD
                if (self::isAtmCardModelForm($model_payment_method_name)) { // neu la atm card
                    foreach ($model->validators as $key => $validator) {
                        if (in_array('verifyCode', $validator->attributes)) {
                            unset($model->validators[$key]);
                        }
                    }
                }

                $model->submit();
            }

            // sandbox local ko can
            if ($model->info['partner_payment_code'] == 'VCB' && $model->info['method_code'] == 'QR-CODE') {
                $model->payment_transaction['partner_payment_info']['qr_data'] = self::genQRcode($model->payment_transaction['partner_payment_info']['qr_data']);
            }
            return $this->render('verify', array(
                'checkout_order' => $this->checkout_order,
                'transaction' => $this->transaction,
                'model' => $model,
            ));
        } else {
            $this->redirectErrorPage('Địa chỉ trang truy cập không tồn tại');
        }
    }

    public static function isAtmCardModelForm($modelName)
    {
        return stripos($modelName, 'PaymentMethodAtmCard') !== false;
        // khong dung != false vì sẽ lỗi nếu chuỗi con nằm ở vị trí đầu của chuỗi mẹ
    }

    /**
     * @return false|string
     */
    public function actionGetInstallmentPackages()
    {
        $res = [
            'error' => false,
            'data' => [],
            'message' => '',
        ];
        $data = $_POST;
        $result = $this->getCheckExcludedDateV2($data['card_number'], $data['card_info'],
            $data['payment_method_info_config']['class']);
        if ($result['error_message'] != '') {
            $res['error'] = true;
            $res['message'] = $result['error_message'];
        }
        return json_encode($res);
    }

    public function getCheckExcludedDateV2($card_number, $card_info, $payment_method_info_config)
    {
        $this->actionUpdateStatusExcluded();
        $card_type = [
            '001' => 'VISA',
            '007' => 'JCB',
            '002' => 'MASTERCARD',
            '003' => 'AMEX',
        ];
        $error_message = '';
        $bin = substr(str_replace(' ', '', $card_number), 0, 6);
//        echo "{$bin}-{" . strtoupper($card_info) . "}-{" . strtoupper($payment_method_info_config) . "}";;
//        die;
        $bin_data = Tables::selectAllBySql("SELECT * FROM bin_accept_v2 where code ='" . $bin . "' AND card_type ='" . strtoupper($card_info) . "' AND bank_code = '" . $payment_method_info_config . "'");
        $query = Tables::selectAllBySql("SELECT * FROM installment_excluded_date where status = 0 AND bank_code = '" . $payment_method_info_config . "' AND bin = '[" . json_encode($bin) . "]'");
        $method = false;
        if (count($bin_data) > 0) {
            for ($x = 0; $x < count($query); $x++) {
                $method_query = json_decode($query[$x]['method'], true);
                if (in_array(strtoupper($card_info), $method_query) && in_array(getdate()['mday'],
                        explode(',', $query[$x]['excluded_date']))) {
                    $method = true;
                    $error_message = $query[$x]['message'];
                } else {
                    $error_message = 'Ngày giao dịch bị từ chối vui lòng sử dụng thẻ khác';
                }
            }
        } else {
            $error_message = 'Thẻ chưa được thiết lập thanh toán trả góp vui lòng liên hệ vận hành để được hỗ trợ.';
        }
        return [
            'method' => $method,
            'error_message' => $error_message,
        ];
    }

    public static function calculateInstallmentAmount($payer_fee, $checkout_order_amount)
    {
        return $payer_fee + $checkout_order_amount;
    }

    public function actions()
    {
        return [
            'captcha' => [
                'class' => CaptchaAction::class,
                'backColor' => 0xFFFFFF, // Màu nền, định dạng hexa (trắng)
                'foreColor' => 0xFF0000, // Màu chữ, định dạng hexa (đỏ)
                'minLength' => 3, // Chiều dài tối thiểu của mã
                'maxLength' => 3, // Chiều dài tối đa của mã
                'offset' => 5, // Độ lệch của ký tự
                'width' => 120, // Chiều rộng ảnh
                'height' => 50, // Chiều cao ảnh
            ],
        ];
    }

    /**
     * @throws \SoapFault
     */
    public function actionCheckEnroll()
    {
        $result = false;
        $data = Yii::$app->request->post();
        Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
        if (isset($data['token_code']) && $data['token_code'] != null && $data['token_code'] != "") {
            $checkout_order_info = CheckoutOrder::find()->where(['token_code' => $data['token_code']])->one();
            if ($checkout_order_info) {
                if ($checkout_order_info->status == CheckoutOrder::STATUS_NEW) {
                    if ($data['payment_method_code'] == "MULTIPLE-CREDIT-CARD") {
                        $type_card = CyberSourceVcb3ds2::getTypeCardByFirstBINNumber($data['custommer_info']['card_number'],
                            false);
                        if ($type_card) {
                            $continue = true;
                            $data['payment_method_code'] = strtoupper($type_card) . "-CREDIT-CARD";

                            $card_type_code = [
                                'VISA' => '001',
                                'JCB' => '007',
                                'MASTERCARD' => '002',
                                'AMEX' => '003',
//                                'UPI' => '062',
                            ][strtoupper($type_card)];

                        } else {
                            $continue = false;
                        }
                    } else {
                        $card_type_code = $data['custommer_info']['card_type'];
                        $continue = true;
                    }

                    if ($continue) {
                        $payment_method_info = PaymentMethodBusiness::getInfoByPaymentMethodCode($data['payment_method_code'],
                            'version_1_0');
                        if ($payment_method_info) {
                            if ($payment_method_info['method_code'] == "CREDIT-CARD") {
                                if (Merchant::getPaymentFlowById($checkout_order_info->merchant_id)) {
                                    $payment_method_info['partner_payment_id'] = "15";
                                    $payment_method_info['partner_payment_code'] = "CYBER-SOURCE-VCB-3DS2";
                                } else {
                                    $payment_method_info['partner_payment_id'] = "12";
                                    $payment_method_info['partner_payment_code'] = "CYBER-SOURCE-VCB";
                                }
                            }
                            $partner_payment_account_info = PartnerPaymentAccount::getByMerchantIdAndPartnerPaymentId($checkout_order_info->merchant_id,
                                $payment_method_info['partner_payment_id']);
                            if ($partner_payment_account_info) {
                                $params = [
                                    'partner_payment_account_info' => $partner_payment_account_info
                                ];
                                if (isset($data['custommer_info']['name_on_account'])) {
                                    $card_fullname = $this->_convertName($data['custommer_info']['name_on_account']);
                                } else {
                                    $card_fullname = $checkout_order_info->buyer_fullname;
                                }

                                $this->_processCardFullname($card_fullname, $first_name, $last_name);
                                $merchant_fee_info = MerchantFee::getPaymentFee($checkout_order_info->merchant_id,
                                    $payment_method_info['id'], $checkout_order_info->amount, 'VND', time());
                                $sender_fee = MerchantFee::getSenderFeeForWithdraw($merchant_fee_info,
                                    $checkout_order_info->amount);
                                if (isset($data['enrrol_checked']) && $data['enrrol_checked']) {
                                    return self::updateFailure($checkout_order_info, $payment_method_info, $last_name,
                                        $first_name, $data);
                                }

                                if (isset($data['custommer_info']['country']) != null && in_array($data['custommer_info']['country'],
                                        ['US', "CA"])) {
                                    $postal_code = isset($data['custommer_info']['zip_or_portal_code']) ? $data['custommer_info']['zip_or_portal_code'] : '91356';
                                    $state = isset($data['custommer_info']['state']) ? $data['custommer_info']['state'] : '';
                                } else {
                                    $postal_code = "";
                                    $state = "";
                                }

                                $cyber_source = new CyberSourceVcb3ds2($params);
                                $inputs = array(
                                    'reference_code' => $GLOBALS['PREFIX'] . $checkout_order_info->id,
                                    'city' => isset($data['custommer_info']['city']) ? $data['custommer_info']['city'] : 'Ha Noi',
                                    'country' => isset($data['custommer_info']['country']) ? $data['custommer_info']['country'] : 'Viet Nam',
                                    'email' => $checkout_order_info->buyer_email,
                                    'phone' => $checkout_order_info->buyer_mobile,
                                    'first_name' => $first_name,
                                    'last_name' => $last_name,
                                    'postal_code' => $postal_code,
                                    'state' => $state,
                                    'address' => isset($data['custommer_info']['billing_address']) ? $data['custommer_info']['billing_address'] : $checkout_order_info->buyer_address,
                                    'customer_id' => 0,
                                    'account_number' => $data['custommer_info']['card_number'],
                                    'card_type' => $card_type_code,
                                    'expiration_month' => $data['custommer_info']['expiration_month'],
                                    'expiration_year' => $data['custommer_info']['expiration_year'],
                                    'currency' => 'VND',
                                    'amount' => $sender_fee + $checkout_order_info->amount,
                                    'cvv_code' => $data['custommer_info']['card_code'],
                                    'client_ip' => @$_SERVER['REMOTE_ADDR'],
                                    'order_code' => $checkout_order_info->order_code,
                                    'referenceID' => isset($data['custommer_info']['referenceID']) ? $data['custommer_info']['referenceID'] : '',
                                    'ignore_avs' => in_array($checkout_order_info->merchant_id,
                                        ['91', "168", "78", "192"]),
//                                'run_authorize' => !in_array($checkout_order_info->merchant_id, ['78', '91', "168"]), // Insert Dai-ichi Merchant
                                );

                                $check_enroll = $cyber_source->checkEnroll($inputs);
//                            @Helpers::writeLog("[CHECK_ENROLL][RESPONSE]" . json_encode($check_enroll));
                                if ($check_enroll == null) {
                                    $result = [
                                        'status' => false,
                                        'error_message' => "Lỗi kết nối đến kênh thanh toán",
                                    ];
                                } else {
                                    $reasonCode = $check_enroll->reasonCode;

                                    $eci = '';
                                    if (isset($check_enroll->payerAuthEnrollReply->eci)) {
                                        $eci = $check_enroll->payerAuthEnrollReply->eci;
                                    } elseif (isset($check_enroll->payerAuthEnrollReply->eciRaw)) {
                                        $eci = $check_enroll->payerAuthEnrollReply->eciRaw;
                                    }
                                    if (CyberSourceVcb3ds2::checkChallenge($check_enroll)) {
                                        $result = [
                                            'status' => true,
                                            'valid' => true,
                                            'auth_info' => array(
                                                'paReq' => $check_enroll->payerAuthEnrollReply->paReq,
                                                'acsURL' => $check_enroll->payerAuthEnrollReply->acsURL,
                                                'authenticationTransactionID' => $check_enroll->payerAuthEnrollReply->authenticationTransactionID,
                                            ),
                                        ];
                                    } elseif ($reasonCode == 100 &&
                                        isset($check_enroll->ccAuthReply->reasonCode) &&
                                        $check_enroll->ccAuthReply->reasonCode == "100" &&
                                        isset($check_enroll->ccAuthReply->authorizationCode) &&
                                        $check_enroll->ccAuthReply->authorizationCode != "" &&
                                        $eci != null &&
                                        !in_array($eci, ["00", "07"])
                                    ) {
                                        return CheckoutOrderBusiness::updateSuccess($checkout_order_info,
                                            $payment_method_info, $last_name, $first_name, $data,
                                            $check_enroll->requestID, $check_enroll->ccAuthReply->authorizationCode);
                                    } elseif (isset($check_enroll->payerAuthEnrollReply->paresStatus)
                                        && $check_enroll->payerAuthEnrollReply->paresStatus == "Y"
                                        && $eci != null && !in_array($eci, ["00", "07"])) {
                                        $result = [
                                            'status' => true,
                                            'valid' => false,
                                            'auth_info' => array(
                                                'authenticationTransactionID' => $check_enroll->payerAuthEnrollReply->authenticationTransactionID,
                                            ),
                                        ];
                                    } else {
                                        return self::updateFailure($checkout_order_info, $payment_method_info,
                                            $last_name, $first_name, $data, $check_enroll);
                                    }
                                }
                            } else {
                                $result = [
                                    'status' => false,
                                    'error_message' => "Chưa cấu hình tài khoản kênh thanh toán",
                                ];
                            }
                        } else {
                            $result = [
                                'status' => false,
                                'error_message' => "Chưa cấu hình phương thức thanh toán",
                            ];
                        }
                    } else {
                        $result = [
                            'status' => false,
                            'error_message' => "Đầu BIN không hợp lệ",
                        ];
                    }

                } else {
                    $result = [
                        'status' => false,
                        'error_message' => "Trạng thái đơn hàng không hợp lệ"
                    ];
                }
            } else {
                $result = [
                    'status' => false,
                    'error_message' => "Không tìm thấy đơn hàng"
                ];
            }
        } else {
            $result = [
                'status' => false,
                'error_message' => "Tham số đầu vào không hợp lệ"
            ];
        }
//        @Helpers::writeLog("[" . $checkout_order_info->order_code . "][CHECK_ENROLL][RESULT]" . json_encode($result));
        return $result;
    }

    public static function _getUrlFailure($token_code): string
    {
        return Yii::$app->urlManager->createAbsoluteUrl([
            'version_3_0/failure',
            'token_code' => $token_code
        ], HTTP_CODE);
    }

    private function _convertName($content)
    {
        $utf82abc = array('à' => 'a', 'á' => 'a', 'ả' => 'a', 'ã' => 'a', 'ạ' => 'a', 'ă' => 'a', 'ằ' => 'a', 'ắ' => 'a', 'ẳ' => 'a', 'ẵ' => 'a', 'ặ' => 'a', 'â' => 'a', 'ầ' => 'a', 'ấ' => 'a', 'ẩ' => 'a', 'ẫ' => 'a', 'ậ' => 'a', 'đ' => 'd', 'è' => 'e', 'é' => 'e', 'ẻ' => 'e', 'ẽ' => 'e', 'ẹ' => 'e', 'ê' => 'e', 'ề' => 'e', 'ế' => 'e', 'ể' => 'e', 'ễ' => 'e', 'ệ' => 'e', 'ì' => 'i', 'í' => 'i', 'ỉ' => 'i', 'ĩ' => 'i', 'ị' => 'i', 'ò' => 'o', 'ó' => 'o', 'ỏ' => 'o', 'õ' => 'o', 'ọ' => 'o', 'ô' => 'o', 'ồ' => 'o', 'ố' => 'o', 'ổ' => 'o', 'ỗ' => 'o', 'ộ' => 'o', 'ơ' => 'o', 'ờ' => 'o', 'ớ' => 'o', 'ở' => 'o', 'ỡ' => 'o', 'ợ' => 'o', 'ù' => 'u', 'ú' => 'u', 'ủ' => 'u', 'ũ' => 'u', 'ụ' => 'u', 'ư' => 'u', 'ừ' => 'u', 'ứ' => 'u', 'ử' => 'u', 'ữ' => 'u', 'ự' => 'u', 'ỳ' => 'y', 'ý' => 'y', 'ỷ' => 'y', 'ỹ' => 'y', 'ỵ' => 'y', 'À' => 'A', 'Á' => 'A', 'Ả' => 'A', 'Ã' => 'A', 'Ạ' => 'A', 'Ă' => 'A', 'Ằ' => 'A', 'Ắ' => 'A', 'Ẳ' => 'A', 'Ẵ' => 'A', 'Ặ' => 'A', 'Â' => 'A', 'Ầ' => 'A', 'Ấ' => 'A', 'Ẩ' => 'A', 'Ẫ' => 'A', 'Ậ' => 'A', 'Đ' => 'D', 'È' => 'E', 'É' => 'E', 'Ẻ' => 'E', 'Ẽ' => 'E', 'Ẹ' => 'E', 'Ê' => 'E', 'Ề' => 'E', 'Ế' => 'E', 'Ể' => 'E', 'Ễ' => 'E', 'Ệ' => 'E', 'Ì' => 'I', 'Í' => 'I', 'Ỉ' => 'I', 'Ĩ' => 'I', 'Ị' => 'I', 'Ò' => 'O', 'Ó' => 'O', 'Ỏ' => 'O', 'Õ' => 'O', 'Ọ' => 'O', 'Ô' => 'O', 'Ồ' => 'O', 'Ố' => 'O', 'Ổ' => 'O', 'Ỗ' => 'O', 'Ộ' => 'O', 'Ơ' => 'O', 'Ờ' => 'O', 'Ớ' => 'O', 'Ở' => 'O', 'Ỡ' => 'O', 'Ợ' => 'O', 'Ù' => 'U', 'Ú' => 'U', 'Ủ' => 'U', 'Ũ' => 'U', 'Ụ' => 'U', 'Ư' => 'U', 'Ừ' => 'U', 'Ứ' => 'U', 'Ử' => 'U', 'Ữ' => 'U', 'Ự' => 'U', 'Ỳ' => 'Y', 'Ý' => 'Y', 'Ỷ' => 'Y', 'Ỹ' => 'Y', 'Ỵ' => 'Y', '̀' => '', '́' => '', '̉' => '', '̃' => '', '̣' => '');
        return str_replace(array_keys($utf82abc), array_values($utf82abc), $content);
    }

    public function actionRequest()
    {
        if ($this->checkout_order['status'] == CheckoutOrder::STATUS_CANCEL) {
            if ($this->checkout_order['cancel_url'] != '') {
                header('Location:' . $this->checkout_order['cancel_url']);
                die();
            }
        }
        if (!in_array($this->checkout_order['status'], array(CheckoutOrder::STATUS_NEW))) {
            $this->redirectWarningPage('Đơn đặt hàng đang được xử lý thanh toán. Vui lòng hoàn tất thanh toán trong lượt đó hoặc quay lại tạo đơn hàng mới!');
//            $this->redirectWarningPage('The order has been processed payment with bank in previous working turn. You have to finish the payment in that turn or back to the seller’s website to create a new order!');
        }
        //-----------
        $error_message = '';
        $payment_method_code = ObjInput::get('payment_method_code', 'str', '');

        $payment_method_info = PaymentMethodBusiness::getInfoByPaymentMethodCodeV2($payment_method_code,
            'version_1_0', $this->checkout_order['merchant_id'], $this->checkout_order['amount']);
        if ($payment_method_info['method_code'] == "CREDIT-CARD") {
            if (Merchant::getPaymentFlowById($this->checkout_order['merchant_id'])) {
                $payment_method_info['partner_payment_id'] = "15";
                $payment_method_info['partner_payment_code'] = "CYBER-SOURCE-VCB-3DS2";
            } else {
                $payment_method_info['partner_payment_id'] = "12";
                $payment_method_info['partner_payment_code'] = "CYBER-SOURCE-VCB";
            }
        }
        $merchant_fee_info = MerchantFee::getPaymentFee($this->checkout_order['merchant_id'],
            $payment_method_info['id'], $this->checkout_order['amount'], 'VND', time());
        $sender_fee = MerchantFee::getSenderFeeForWithdraw($merchant_fee_info, $this->checkout_order['amount']);
        $this->checkout_order['merchant_fee_info'] = $merchant_fee_info;
        if ($payment_method_info != false) {
            $model_payment_method_name = PaymentMethod::getModelFormName($payment_method_info['partner_payment_code'],
                $payment_method_info['method_code'], $payment_method_info['code']);
//            echo $model_payment_method_name.'<br>';die;
            if (class_exists($model_payment_method_name)) {
                $model = new $model_payment_method_name();

                $model->set($this->checkout_order['amount'], 3, 'request', $payment_method_info,
                    $payment_method_info['partner_payment_code'], $payment_method_info['partner_payment_id'], null, null, 3);
                $model->active = true;
                $model->checkout_order = $this->checkout_order;
                if ($model->getPayerFee() !== false) {
                    if (TransactionType::isInstallmentTransactionType($model['info']['transaction_type_id'])) {
                        $model->partner_payment_fee = $model->getPayerFee();
                    }
                    $model->load(Yii::$app->request->get());
                    $model->initOption();

                    if ($model->isSubmit($payment_method_info['partner_payment_code'], Yii::$app->request->post())) {
                        //print_r($model); exit();
                        if ($payment_method_info['method_code'] == 'TRA-GOP') {
                            $installment_config = Tables::selectOneDataTable('installment_config',
                                'merchant_id = ' . $this->checkout_order['merchant_id'] . ' AND status = 1', '', '');
                            if ($installment_config) {
                                $checkExcludedDate = $this->getCheckExcludedDate($model, $payment_method_info);
                                if (!$checkExcludedDate['method']) {
                                    $model->submit();
                                } else {
                                    if ($checkExcludedDate['error_message']) {
                                        $this->redirectErrorPage($checkExcludedDate['error_message']);
                                    } else {
                                        $this->redirectWarningPage('Ngày giao dịch bị từ chối vui lòng sử dụng thẻ khác');
                                    }
                                }
                            } else {
                                //die('Chưa cấu hình phí cho phương thức thanh toán này');
                                $this->redirectErrorPage('Cấu hình trả góp đã bị khoá, không thể thực hiện giao dịch.');
                            }
                        } else {
                            $model->submit();
                        }
                    }
                    $lang_request = Yii::$app->language;
                    return $this->render('request', array(
                        'checkout_order' => $this->checkout_order,
                        'transaction' => $this->transaction,
                        'model' => $model,
                        'action' => $model->getRequestActionForm(),
                        'lang_request' => $lang_request,
                    ));
                } else {
                    //die('Chưa cấu hình phí cho phương thức thanh toán này');
                    $this->redirectErrorPage('Chưa cấu hình phí cho phương thức thanh toán này');
                }
            }
        } elseif ($payment_method_code == "MULTIPLE-CREDIT-CARD") {
            $payment_methods = [
                'VISA',
                'MASTERCARD',
                'JCB',
                'AMEX',
            ];

            $payment_method_accept = [];

            foreach ($payment_methods as $payment_method) {
                $payment_method_check_info = PaymentMethodBusiness::getInfoByPaymentMethodCodeV2($payment_method . "-CREDIT-CARD",
                    'version_1_0', $this->checkout_order['merchant_id'], $this->checkout_order['amount']);
                if ($payment_method_check_info) {
                    $payment_method_accept[] = $payment_method;
                }
            }


            $payment_method_info_tmp = PaymentMethodBusiness::getInfoByPaymentMethodCodeV2($payment_method_accept[array_rand($payment_method_accept)] . "-CREDIT-CARD",
                'version_1_0', $this->checkout_order['merchant_id'], $this->checkout_order['amount']);

            $payment_method_info_tmp['id'] = "0";
            $payment_method_info_tmp['code'] = "MULTIPLE-CREDIT-CARD";

            $model = new PaymentMethodCreditCardCyberSourceVcb3ds2MultipleCreditCardForm();
            $model->active = true;
            $model->set($this->checkout_order['amount'], Yii::$app->controller->id, 'request', $payment_method_info_tmp,
                $payment_method_info_tmp['partner_payment_code'], $payment_method_info_tmp['partner_payment_id']);
            $model->checkout_order = $this->checkout_order;
            $model->load(Yii::$app->request->get());
            $model->initOption();
            $lang_request = Yii::$app->language;
            return $this->render('request', array(
                'checkout_order' => $this->checkout_order,
                'transaction' => $this->transaction,
                'model' => $model,
                'action' => $model->getRequestActionForm(),
                'lang_request' => $lang_request,
            ));
//            echo "<pre>";
//            var_dump($model);
//            die();
        } else {
            $this->redirectErrorPage('Thông tin thanh toán không hợp lệ sai phương thức thanh toán hoặc mã ngân hàng');
        }
    }

}
